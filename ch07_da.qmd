# Discriminant analysis

```{r}
library(tidyverse)
library(tidymodels)
```


## Example 7.4

### Load data

```{r}
dat1 <- read_csv("data/ch7_dat1.csv") |> 
  mutate(class = as.factor(class))
```


### Linear discriminant analysis

Define a model for linear discriminant analysis by calling `discrim_linear()`. The default engine is `{MASS}`. Linear discriminant analysis with `{MASS}` engine requires installation and loading `{discrim}` package. Let us set engine-specific argument `prior = c(0.5, 0.5)` to explicitly set prior probabilities instead of using proportions within training data.


```{r}
library(discrim)

lda_model <- 
  discrim_linear() |> 
  set_engine("MASS", prior = c(0.5, 0.5))
```

Let's check model fit template.

```{r}
translate(lda_model)
```

Let's train the model.

```{r}
lda_fit <- 
  lda_model |> 
  fit(class ~ X1 + X2, data = dat1)
```

`tidy()` function does not support this model, so let us just print the model.

```{r}
lda_fit
```


### Prediction

Let us make a prediction on training data.

```{r}
results <-
  dat1 |> 
  bind_cols(
    predict(lda_fit, dat1, type = "prob"),
    predict(lda_fit, dat1, type = "class")
  )

results
```

Let us evaluate the classification performance. Here, `.pred_1` is additionally passed as an argument to compute `roc_auc()`.

```{r}
metrics_multi <- metric_set(accuracy, sens, spec, f_meas, roc_auc)
metrics_multi(results, truth = class, estimate = .pred_class, .pred_1)
```



## Example 7.6

### Load data

```{r}
dat1 <- read_csv("data/ch7_dat1.csv") |> 
  mutate(class = as.factor(class))
```

### Quadratic discriminant analysis

Almost identical to linear discriminant analysis, except that you should use `discrim_quad()`.


```{r}
library(discrim)

qda_model <- 
  discrim_quad() |> 
  set_engine("MASS", prior = c(0.5, 0.5))

translate(qda_model)

qda_fit <- 
  qda_model |> 
  fit(class ~ X1 + X2, data = dat1)

qda_fit
```


### Prediction

```{r}
results <-
  dat1 |> 
  bind_cols(
    predict(qda_fit, dat1, type = "prob"),
    predict(qda_fit, dat1, type = "class")
  )

results

metrics_multi <- metric_set(accuracy, sens, spec, f_meas, roc_auc)
metrics_multi(results, truth = class, estimate = .pred_class, .pred_1)
```



## Example 7.7

### Load data

```{r}
iris <- read_csv("data/iris.csv") |> 
  mutate(Species = as.factor(Species))
```

### Train/Test split

Let us make 30 observations from each species as training data, while let remaining 20 observations be testing data.

```{r}
iris_split <- initial_split(iris, prop = 30 / 50, strata = Species)
training_dat <- training(iris_split)
testing_dat <- testing(iris_split)
```

:::{.callout-note}
Unfortunately, this does not provide an exact results to a book example. `initial_time_split()` does not consume `strata` argument.

The following code will provide the exactly same results to the book example.

```{.r}
iris_split <- iris |> 
  split(iris$Species) |> 
  map(\(x) initial_time_split(x, prop = 30 / 50))

training_dat <- map(iris_split, training) |> bind_rows()
testing_dat <- map(iris_split, testing) |> bind_rows()
```
:::

### Linear discriminant analysis

Estimate LDA model on training data.

```{r}
library(discrim)

lda_fit <- 
  discrim_linear() |> 
  fit(Species ~ ., data = training_dat)
```

Make a prediction on testing data.

```{r}
results <- 
  testing_dat |> 
  bind_cols(
    predict(lda_fit, testing_dat, type = "class")
  )

results
```

Confusion matrix

```{r}
conf_mat(results, truth = Species, estimate = .pred_class)
```

